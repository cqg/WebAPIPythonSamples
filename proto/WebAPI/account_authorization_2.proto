// Messages for accounts that require separate authorization process
syntax = "proto2";

package account_authorization_2;

import "WebAPI/user_session_2.proto";
import "common/shared_1.proto";
import "google/protobuf/timestamp.proto";

//// Messages for accounts that require separate authorization process.
// Only one request per account is allowed for simultaneous processing.

// Account level Logon Request. One-step logon procedure.
// Note: it is deprecated. Use multi-step account logon procedure instead
// (see AccountLogonRoutineClient / AccountLogonRoutineServer).
message AccountLogon
{
  // Account ID in CQG trade routing system.
  required sint32 account_id = 1;

  // User login name for this account.
  required string username = 2;

  // User's password for this account.
  required string password = 3;
}

// Account level Logon result.
// Note: it is deprecated. Use multi-step account logon procedure instead
// (see AccountLogonRoutineClient / AccountLogonRoutineServer).
message AccountLogonResult
{
  // Account ID in CQG trade routing system.
  required sint32 account_id = 1;

  enum ResultCode
  {
    //// success codes
    // User is logged in to the system. Account connection status becomes CONNECTED.
    RESULT_CODE_SUCCESS = 0;

    // Account password change required after the first logon of new account.
    // Account connection status remains CONNECTING.
    RESULT_CODE_PASSWORD_CHANGE_REQUIRED = 1;

    // Account password expired. Account connection status remains CONNECTING.
    RESULT_CODE_PASSWORD_EXPIRED = 2;

    //// failure codes (100+), account connection status is reset to DISCONNECTED.
    // General failure.
    RESULT_CODE_FAILURE = 101;
  }

  // One of the logon result codes.
  // This field is associated with ResultCode enum type.
  required uint32 result_code = 2;

  // Optional logon result message for failure details.
  optional shared_1.Text text_message = 3;

  // Time when the message was sent.
  required google.protobuf.Timestamp server_utc_timestamp = 4;
}

// Account level password change request.
message AccountPasswordChange
{
  // Account ID in CQG trade routing system.
  required sint32 account_id = 1;

  // Currently used password.
  required string old_password = 2;

  // New password that user wants to use.
  required string new_password = 3;
}

// Account level password change result.
message AccountPasswordChangeResult
{
  // Account ID in CQG trade routing system.
  required sint32 account_id = 1;

  // Password change result.
  enum ResultCode
  {
    /// success codes
    // User password is changed successfully.
    RESULT_CODE_SUCCESS = 0;

    /// failure codes (100+)
    // Most likely incorrect user name or password.
    RESULT_CODE_FAILURE = 101;
  }

  // This field is associated with ResultCode enum type.
  required uint32 result_code = 2;

  // Optional failure details.
  optional shared_1.Text text_message = 3;
}

// Account level Logoff request.
message AccountLogoff
{
  // Account ID in CQG trade routing system.
  required sint32 account_id = 1;
}

// Account level Logoff result.
message AccountLogoffResult
{
  // Account ID in CQG trade routing system.
  required sint32 account_id = 1;

  // Logoff result.
  enum ResultCode
  {
    /// success codes
    // Logoff was successful.
    RESULT_CODE_SUCCESS = 0;

    /// failure codes (100+)
    // Logoff failed.
    RESULT_CODE_FAILURE = 101;
  }

  // This field is associated with ResultCode enum type.
  required uint32 result_code = 2;

  // Optional failure description.
  optional shared_1.Text text_message = 3;

  // Time when the message was sent.
  required google.protobuf.Timestamp server_utc_timestamp = 4;
}

// Message for multi-step account level logon.
// Multi-step account level logon sequence has the following steps:
//      1) Client initiates logon negotiation by sending 
//         AccountLogonRoutineClient.logon_init message to the server.
//      2) Server sends one or more AccountLogonRoutineServer.password_requests messages
//         (this step may repeat after step #3).
//      3) Client sends list of AccountLogonRoutineClient.password_responses back to the
//         server.
//      4) Server sends AccountLogonRoutineServer.logon_result as the final message of
//         the negotiation.
// Client may stop the negotiation by sending AccountLogonRoutineClient.abort_logon
// message in response to any server AccountLogonRoutineServer.password_requests
// message.
// NOTE: only one of logon_init, password_responses and abort_logon fields has to be
// specified.
message AccountLogonRoutineClient
{
  // Account ID in CQG trade routing system.
  // This is a required field.
  optional sint32 account_id = 1;

  // Initiating of multi-step account level logon process by client.
  optional AccountLogonInit logon_init = 2;

  // List of passwords in response to request from server.
  // The number of passwords in response should be equal to the number of passwords in request from server.
  repeated user_session_2.PasswordResponse password_responses = 3;

  // Aborting of multi-step account level logon process by client.
  optional user_session_2.AbortRoutine abort_logon = 4;
}

// Initiating of account level multi-step logon process by client.
// Note: unlike user_session_2.LogonInit used for trader logon, we do not assume that
// user_name is required for account level logon. Where required, server will request it
// via AccountLogonRoutineServer.password_requests with password_type=PASSWORD_TYPE_TEXT
// and user_prompt_type=user_name.
message AccountLogonInit
{
}

// Response to the AccountLogonRoutineClient message.
// Only one of logon_result and password_requests fields is specified.
// Note that most messages are shared with multi-step logon, though not all options may
// be available when used with multi-step account level logon.
message AccountLogonRoutineServer
{
  // Account ID in CQG trade routing system.
  // This is a required field.
  optional sint32 account_id = 1;

  // Final message of the negotiation with the results.
  optional user_session_2.LogonResult logon_result = 2;

  // List of requested passwords.
  repeated user_session_2.PasswordRequest password_requests = 3;
}

// Message for multi-step account level password change.
// Multi-step account level password change sequence has the following steps:
//      1) Client initiates account level password change procedure by sending
//         AccountPasswordChangeRoutineClient.init_password_change to the server.
//      2) Server sends one or more AccountPasswordChangeRoutineServer.password_requests
//         messages (this step may repeat after step #3).
//      3) Client sends list of AccountPasswordChangeRoutineClient.password_responses
//         back to the server.
//      4) Server sends AccountPasswordChangeRoutineServer.password_change_result
//         as the final message of the negotiation with the results.
//         Client may stop the negotiation by sending
//         AccountPasswordChangeRoutineClient.abort_password_change message in response
//         to any server AccountPasswordChangeRoutineServer.password_request message.
// NOTE: only one of init_password_change, password_responses and abort_password_change
// fields has to be specified.
message AccountPasswordChangeRoutineClient
{
  // Account ID in CQG trade routing system.
  // This is a required field.
  optional sint32 account_id = 1;

  // True means user has decided to initiate password changing procedure.
  optional bool init_password_change = 2;

  // List of passwords in response to request from server.
  // The number of passwords in response should be equal to the number of passwords in request from server.
  repeated user_session_2.PasswordResponse password_responses = 3;

  // Aborting of multi-step password change process by client.
  optional user_session_2.AbortRoutine abort_password_change = 4;
}

// Response to the AccountPasswordChangeRoutineClient message.
// Only one of password_requests and password_change_result fields is specified.
// Note that most messages are shared with multi-step logon, though not all options may
// be available when used with multi-step account level logon.
message AccountPasswordChangeRoutineServer
{
  // Account ID in CQG trade routing system.
  // This is a required field.
  optional sint32 account_id = 1;

  // List of requested passwords.
  repeated user_session_2.PasswordRequest password_requests = 2;

  // Final message of the negotiation with the results.
  optional user_session_2.PasswordChangeResult password_change_result = 3;
}