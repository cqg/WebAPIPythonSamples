// Trade Routing messaging

syntax = "proto2";

package trade_routing_2;

import "WebAPI/metadata_2.proto";
import "WebAPI/order_2.proto";
import "common/decimal.proto";
import "common/shared_1.proto";
import "google/protobuf/timestamp.proto";

// Subscription to trade routing data and notifications about trading information updates.
// Client can be subscribed to several publications.
// If some account is subscribed by several publications then client will receive a separate snapshot per subscription
// but one real time update with a list of subscriptions.
message TradeSubscription
{
  // ID of a subscription that should be unique enough to match responses and updates with corresponding requests.
  required uint32 id = 1;

  // Scope of the subscription (provide a list).
  enum SubscriptionScope
  {
    // Subscribe to order updates.
    SUBSCRIPTION_SCOPE_ORDERS = 1;

    // Subscribe to open positions and matched trades updates.
    // Note that PositionStatus messages are reported only for accounts
    // with trading_account_2.Account.cleared_by_statements=True flag.
    // Accounts without this flag will not receive PositionStatus messages,
    // but the subscription will succeed.
    SUBSCRIPTION_SCOPE_POSITIONS = 2;

    // Deprecated. Use SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY instead.
    SUBSCRIPTION_SCOPE_COLLATERAL = 3;

    // Subscribe to account summary updates (current margin, purchasing power,
    // total filled quantity etc).
    // Note that AccountSummaryStatus messages are reported only for accounts
    // with trading_account_2.Account.cleared_by_statements=True flag.
    // Accounts without this flag will not receive AccountSummaryStatus messages,
    // but the subscription will succeed.
    SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY = 4;

    // Subscribe to positions updates from exchange.
    // Note that ExchangePositionStatus messages are reported only for accounts
    // with trading_account_2.Account.supports_exchange_positions_subscription=True flag.
    // Accounts without this flag will not receive ExchangePositionStatus messages,
    // but the subscription will succeed.
    SUBSCRIPTION_SCOPE_EXCHANGE_POSITIONS = 5;

    // Subscribe to balances updates from exchange on a per-currency basis.
    // Note that ExchangeBalanceStatus messages are reported only for accounts
    // with trading_account_2.Account.supports_exchange_balances_subscription=True flag.
    // Accounts without this flag will not receive ExchangeBalanceStatus messages,
    // but the subscription will succeed.
    SUBSCRIPTION_SCOPE_EXCHANGE_BALANCES = 6;
  }

  // This field is associated with SubscriptionScope enum type.
  // Request is rejected if subscription_scopes contains duplicates.
  repeated uint32 subscription_scopes = 2;

  // Type of the publication to subscribe.
  enum PublicationType
  {
    // Subscribe to a single account or list of accounts.
    PUBLICATION_TYPE_ACCOUNTS = 1;

    // Subscribe to all accounts of a specific sales series.
    PUBLICATION_TYPE_SALES_SERIES = 2;

    // Subscribe to all accounts of a specific brokerage.
    PUBLICATION_TYPE_BROKERAGE = 3;

    // Subscribe to all accounts this user is authorized for (default).
    PUBLICATION_TYPE_ALL_AUTHORIZED = 4;
  }

  // This field is associated with PublicationType enum type.
  optional uint32 publication_type = 3;

  // Account IDs when publicationType = PUBLICATION_TYPE_ACCOUNTS.
  repeated uint32 account_ids = 4 [packed = true];

  // Sales series number when publicationType = PUBLICATION_TYPE_SALES_SERIES.
  optional string sales_series_number = 5;

  // Brokerage ID when publicationType = PUBLICATION_TYPE_BROKERAGE or PUBLICATION_TYPE_SALES_SERIES.
  optional uint32 brokerage_id = 6;

  // True to subscribe, false to unsubscribe (only id value is used to unsubscribe).
  required bool subscribe = 7;

  // Note: use last_order_update_utc_timestamp field instead.
  optional sint64 last_order_update_utc_time = 8 [deprecated = true];

  // Optionally limit request to receive information about orders
  // that were updated/added after specified server related time (inclusive).
  // It is used to reduce amount of information necessary to send after re-connection.
  // Client should be ready for duplicates that have to be detected by corresponding IDs.
  // If specified it's used instead of last_order_update_utc_time field.
  optional google.protobuf.Timestamp last_order_update_utc_timestamp = 14;

  // True means sending only real time data and skip sending an initial orders snapshot,
  // send initial snapshot otherwise.
  // NOTE: do not set this attribute after restoring session since some events might be missed to be delivered,
  // use last_order_update_utc_time instead.
  // NOTE: when set to True, WebAPI server does not send order snapshots for accounts authorized during
  // the subscription.
  optional bool skip_orders_snapshot = 9;

  // True means sending only FCM confirmed positions and their updates (if subscribed)
  // without matching with current day fills, send matched net positions otherwise.
  optional bool confirmed_positions_only = 10;

  // Positions matching algorithm (for position subscription).
  enum MatchingAlgorithm
  {
    // First In, First Out.
    // The first order filled is the first order offset when an order on the opposite side of the market is executed.
    MATCHING_ALGORITHM_FIFO = 1;

    // High Buy, High Sell. The highest buy is matched with the highest sell.
    MATCHING_ALGORITHM_HBHS = 2;

    // Last In, First Out.
    // The last order filled is the first order offset when an order on the opposite side of the market is executed.
    MATCHING_ALGORITHM_LIFO = 3;
  }

  // This field is associated with MatchingAlgorithm enum type.
  // MATCHING_ALGORITHM_FIFO is used if omitted.
  // Applicable only for contracts with ContractMetadata.position_tracking = POSITION_TRACKING_TYPE_NET_POSITION.
  // For other contract types it is always MATCHING_ALGORITHM_FIFO.
  optional uint32 matching_algorithm = 11;

  // If true or omitted then intraday trades are matched first
  // and then intraday leftover is matched against previous close positions.
  // If false then previous day open positions and intraday fills are matched in a single pass.
  // Applicable only for contracts with ContractMetadata.position_tracking = POSITION_TRACKING_TYPE_NET_POSITION.
  // For other contract types it is always false.
  optional bool match_intraday_first = 12;

  // This field is associated with MatchingAlgorithm enum type.
  // Historical positions Matching algorithm. The same as matching_algorithm if omitted.
  // It is ignored if match_intraday_first is false.
  // Applicable only for contracts with ContractMetadata.position_tracking = POSITION_TRACKING_TYPE_NET_POSITION.
  optional uint32 historical_matching_algorithm = 13;

  // If this field set to true, statuses on orders with ORDER_TYPE_CROSS type will be
  // included into responses. See CrossOrderParameters message.
  // Note that order statuses with cross order type are excluded from snapshot only if 
  // include_cross_orders set to false (or empty) and ORDER_TYPE_CROSS type is not included 
  // into order_snapshot_filter.order_types.
  optional bool include_cross_orders = 15;

  // If this field set to true, child orders of algo strategies will be included
  // into responses. Algo strategy order is order that has Order.algo_strategy field set.
  // It can cause placement of other orders. Some of these subordinate orders will reference initial order
  // (see SyntheticStrategyProperties.root_order_id), such orders are algo strategy "child" orders. Unlike synthetic
  // strategy case, algo strategy child orders are not included in subscription's snapshot or updates by default.
  // Note that unlike synthetic strategy case, fill transactions of child orders are duplicated
  // in algo strategy parent order, but shall be counted only once in calculations of position, collaterals, etc.
  // Note that algo strategy child order doesn't correspond to any "leg" or "node" in "synthetic strategy" sense, so for
  // algo strategy child order SyntheticStrategyProperties.node_number is not set.
  optional bool include_algo_strategy_child_orders = 18;

  // Only order statuses that match the filter are included in a snapshot.
  // By default no filtration is done by the filter.
  // Affects result for scope SUBSCRIPTION_SCOPE_ORDERS.
  // Note that snapshot might still include additional data in responses (e.g. when multiple trade
  // subscriptions with different snapshot filters are requested).
  optional OrderSnapshotFilter order_snapshot_filter = 16;

  // Parameters for account summary trade subscription.
  // It is requred field for subscriptions with SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY scope.
  optional AccountSummaryParameters account_summary_parameters = 17;
}

// Server status for a trade subscription.
// It is sent before or along with a snapshot of initial status information.
message TradeSubscriptionStatus
{
  // Subscription Id this result is sent for.
  required uint32 id = 1;

  // Possible result codes.
  enum StatusCode
  {
    // success codes (0 - 99)
    STATUS_CODE_SUCCESS = 0;

    // Currently subscription is [partially] disconnect because of communication issues.
    // NOTE: Clients should not resubscribe in this case, the server will restore subscription with
    // sending SUCCESS status once communication issues are resolved following with all necessary data updates.
    STATUS_CODE_DISCONNECTED = 1;

    // failure codes (100+)
    STATUS_CODE_FAILURE = 101;

    // The limit of the subscriptions has been violated.
    STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION = 102;

    // Unknown or ambiguous account, sales series number, or brokerage id in the subscription.
    STATUS_CODE_INVALID_PUBLICATION_ID = 103;

    // The limit of subscribed accounts has been violated.
    STATUS_CODE_SUBSCRIBED_ACCOUNTS_LIMIT_VIOLATION = 104;
  }

  // Subscription result.
  // This field is associated with StatusCode enum type.
  required uint32 status_code = 2;

  // Note: use 'details' instead.
  optional string text_message = 3 [deprecated = true];

  // Optional details.
  optional shared_1.Text details = 4;
}

// Indicator that a snapshot of requested information is delivered and corresponding data is complete.
// Note: One ServerMsg can contain several messages, so to be sure that you have complete state
// for the subscription, first process all statuses (e.g. PositionStatus) from the ServerMsg
// which also contains TradeSnapshotCompletion.
message TradeSnapshotCompletion
{
  // ID of a corresponding trade subscription.
  required uint32 subscription_id = 1;

  // List of subscription scopes whose snapshots are completed.
  // Completion message for one scope is sent only once but they can be combined
  // (e.g. one completion message might come for ORDERS and another one later for POSITIONS and COLLATERAL).
  // This field is associated with TradeSubscription.SubscriptionScope enum type.
  repeated uint32 subscription_scopes = 2;
}

// Parameters for account summary trade subscription.
message AccountSummaryParameters
{
  // Identifiers of AccountSummaryStatus fields to be included into response messages.
  // E.g. to get total_margin in AccountSummaryStatus server messages, include value 6 into this collection.
  // Service fields "is_snapshot", "account_id" and "cleared_fields" are always included.
  // At least one field needs to be specified.
  // Server might include more fields in responses than requested (e.g. in case when two trade subscriptions with
  // different list of fields are requested).
  repeated uint32 requested_fields = 1;

  // Account filter. Affects trade subscriptions with publication_type = PUBLICATION_TYPE_ALL_AUTHORIZED.
  // Only accounts that match the filter are included in response messages.
  optional AccountFilter account_filter = 2;
}

// These rules are only applied for the snapshot.
// See order_2.OrderStatus.is_snapshot.
message OrderSnapshotFilter
{
  // Order statuses with these values of OrderStatus.status field are included in a snapshot.
  // This field is associated with shared_1.OrderStatus.Status enum type.
  // If empty, there is no filtration by the field.
  repeated uint32 order_statuses = 1;

  // Order statuses include transactions that match the filter.
  // If empty, no filtration is done by the filter.
  optional TransactionStatusFilter transaction_status_filter = 2;

  // Order statuses with these values of Order.order_type field are included in a snapshot.
  // This field is associated with OrderType enum type.
  // If empty, there is no filtration by the field.
  repeated uint32 order_types = 3;
}

message TransactionStatusFilter
{
  // No transactions are sent.
  // Request is rejected if skip_transactions is true and transaction_statuses field is not empty.
  optional bool skip_transactions = 1;

  // Transaction statuses with these values of TransactionStatus.status are sent.
  // If empty, there is no filtration by the field.
  // This field is associated with shared_1.TransactionStatus.Status enum type.  
  // Request is rejected if skip_transactions is true and transaction_statuses field is not empty.
  repeated uint32 transaction_statuses = 2;
}

// Account filter.
message AccountFilter
{
  // True if omnibus accounts shall be excluded.
  optional bool exclude_omnibus = 1;

  // True if a group accounts member shall be excluded.
  optional bool exclude_group_member = 2;

  // True if accounts related to non-derivative brokerages shall be excluded.
  optional bool exclude_non_derivative = 3;

  // If true, exclude accounts that had "Zero positions at the end of the day" option during last account's clearing.
  optional bool exclude_cleared_with_zeroed_positions = 4;

  // If true, exclude accounts that had "Zero balances at the end of the day" option during last account's clearing.
  optional bool exclude_cleared_with_zeroed_balances = 5;
}

// Status of a contract open positions and purchase and sales for a specific account for the current day
// (contractId and accountId are used as a key for updates).
// Contract position is deleted when all open positions and purchase and sales groups are deleted.
message PositionStatus
{
  // List of trade subscription IDs this status is related to.
  repeated uint32 subscription_ids = 1;

  // True if this is a snapshot related message.
  // Since snapshot might be sent in several messages (including none),
  // client should use TradeSnapshotCompletion message as an indicator of complete snapshot delivery.
  optional bool is_snapshot = 2;

  // Account this position belongs to.
  required sint32 account_id = 3;

  // Contract ID assigned by server.
  required uint32 contract_id = 4;

  // True if open positions are short (result of sell operations), long otherwise.
  // In case of separated long and short positions the value is true if the cumulative position is short or flat,
  // the value is false if the cumulative position is long.
  // The attribute is deprecated, refer to OpenPosition.is_short instead.
  required bool is_short_open_position = 5 [deprecated = true];

  // List of new/ updated or deleted open positions.
  // NOTE: full list is sent only in a snapshot, updates include only added, changed and deleted records.
  repeated OpenPosition open_positions = 6;

  // List of purchase and sales groups. This group represent offset trades (usually one sell and one buy).
  // NOTE: full list is sent only in a snapshot, updates include only added, changed and deleted records.
  repeated PurchaseAndSalesGroup purchase_and_sales_groups = 7;

  // Multiple OrderStatus and PositionStatus messages in a single ServerMsg can reference the same contract.
  // If the contract is unknown to the client before this ServerMsg,
  // contract meta-data will be added in at least one of them.
  // If in your code you process orders first and positions second then during processing orders you may
  // encounter order with yet unknown contract_id.
  // In this case you should look for matching contract metadata in positions.
  // The opposite is also true: contract metadata for positions can be in order status messages.
  optional metadata_2.ContractMetadata contract_metadata = 8;

  // Sum of today fill commissions per currency for the contract.
  // Aggregated value from TransactionStatus.fill_commission for current day orders.
  repeated order_2.Commission today_fill_commissions = 9;
}

// Account and contract open position.
// There could be more than one position per account and contract.
// (id is used as a key for updates).
message OpenPosition
{
  // Surrogate id as a key for updates.
  required sint32 id = 1;

  // Note: use qty field instead.
  optional uint32 uint32_qty = 2 [deprecated = true];

  // Position size, zero means that this position is deleted.
  // Note: quantity can be safely compared to zero, because this is an integral number of
  // ContractMetadata.volume_scale units.
  optional cqg.Decimal qty = 12;

  // Position average price.
  // NOTE: Since it could be an aggregated position price is sent in correct format directly.
  required double price_correct = 3;

  // Exchange specific trade date when the position was open or last changed (date only value).
  required sint64 trade_date = 4;

  // Statement date (date value only).
  required sint64 statement_date = 5;

  // UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
  // Note: use trade_utc_timestamp field instead.
  optional sint64 trade_utc_time = 6 [deprecated = true];

  // UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
  optional google.protobuf.Timestamp trade_utc_timestamp = 8;

  // True if the price is an aggregated position price.
  required bool is_aggregated = 7;

  // True if the open position is short (result of a sell operation), long otherwise.
  // Undefined for deleted position (qty is 0).
  required bool is_short = 9;

  // Whether it is a yesterday or a today position.
  // NOTE: where available, this attribute is from the exchange trade date perspective. It is used for
  // position tracking and open/close instructions. It is not the same as previous day (associated
  // with brokerage statement) vs. intraday. It is also not static. For example, an intraday fill
  // with open_close_effect=OPEN will appear, when it is received during the trading session, in an open
  // position or matched trade with is_yesterday=false. After the exchange trade date rolls over for
  // that contract, and before the brokerage statement arrives reflecting it as a previous day position,
  // the same open position or matched trade will contain is_yesterday=true.
  optional bool is_yesterday = 10 [default = false];

  // Speculation type of the position. One of SpeculationType enum.
  optional uint32 speculation_type = 11;
}

// Purchase and sales group that represents offset trades (usually one sell and one buy trade).
message PurchaseAndSalesGroup
{
  // Surrogate id as a key for updates.
  required sint32 id = 1;

  // Profit/ loss (in contract currency) of the group.
  required double realized_profit_loss = 2;

  // List of matched trades in a group.
  // In case of group updates the whole list is sent.
  repeated MatchedTrade matched_trades = 3;
}

// Specific trade or position that is a part of a purchase and sales group.
// (id is used as a key for updates).
message MatchedTrade
{
  // Note: use qty field instead.
  optional uint32 uint32_qty = 1 [deprecated = true];

  // Matched size.
  // Zero means matched trade is deleted.
  // Note: quantity can be safely compared to zero, because this is an integral number of
  // ContractMetadata.volume_scale units.
  optional cqg.Decimal qty = 12;

  // True if this is a short trade (e.g. result of sell operation), long otherwise.
  optional bool is_short = 2;

  // Trade or position average price.
  // NOTE: Since it could be an aggregated position price is sent in correct format directly.
  required double price = 3;

  // Trade date (date value only).
  required sint64 trade_date = 4;

  // Statement date (date value only).
  required sint64 statement_date = 5;

  // UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
  // Note: use trade_utc_timestamp field instead.
  optional sint64 trade_utc_time = 6 [deprecated = true];

  // UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
  optional google.protobuf.Timestamp trade_utc_timestamp = 8;

  // True if the price is an aggregated position price.
  required bool is_aggregated = 7;

  // Whether the trade is of a yesterday or a today position.
  // NOTE: where available, this attribute is from the exchange trade date perspective. It is used for
  // position tracking and open/close instructions. It is not the same as previous day (associated
  // with brokerage statement) vs. intraday. It is also not static. For example, an intraday fill
  // with open_close_effect=OPEN will appear, when it is received during the trading session, in an open
  // position or matched trade with is_yesterday=false. After the exchange trade date rolls over for
  // that contract, and before the brokerage statement arrives reflecting it as a previous day position,
  // the same open position or matched trade will contain is_yesterday=true.
  optional bool is_yesterday = 9 [default = false];

  // Whether the trade closed a new position or opened a new one.
  // Applicable only if ContractMetadata.position_tracking is not POSITION_TRACKING_TYPE_NET_POSITION.
  optional bool is_close = 10;

  // Speculation type of the trade. One of SpeculationType enum.
  optional uint32 speculation_type = 11;
}

// Deprecated.
// Use SubscriptionScope.SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY in TradeSubscription.
message CollateralStatus
{
  // List of trade subscription IDs this status is related to.
  repeated uint32 subscription_ids = 1;

  // True if this is a snapshot related message.
  // Since snapshot might be sent in several messages (including none),
  // client should use TradeSnapshotCompletion message as
  // an indicator of complete snapshot delivery for a particular subscription.
  optional bool is_snapshot = 2;

  // Account id of this status.
  required sint32 account_id = 3;

  // Currency code of margin and PP values.
  required string currency = 4;

  // Margin requirement calculated for worst-case based on open positions and working orders.
  required double total_margin = 5;

  // Margin requirement based on current positions only.
  optional double position_margin = 11;

  // Available account funds including balance, realized profit (or loss), collateral and credits.
  // OTE and MVO are included regarding the account risk parameters.
  // For a group account, purchasing power is a recent snapshot calculated by the server.
  // It uses data from all accounts in the group, so it will not be synchronized with values
  // reported for only this account. Also, for group accounts, OTE and MVO components of
  // purchasing power will not be synchronized with market data updates.
  // See trading_account_2.Account.is_group_member.
  required double purchasing_power = 6;

  // Open trade equity, or potential profit (or loss) from futures and future-style options positions
  // based on opening price of the position and the current future trade/best bid/best ask
  // (regarding to the risk account settings) or first available from: settlement price,
  // yesterday settlement price, yesterday close price, day before yesterday settlement price,
  // day before yesterday close price if trade is not available.
  // Included if applicable.
  optional double ote = 7;

  // Market value of options calculated as the current market trade/best bid/best ask of the option
  // (regarding to the risk account settings) times the number of options
  // (positive for long options and negative for short options) in the portfolio.
  // If trade/best bid/best ask must be used for calculations but is not available,
  // then used first available from: settlement price, yesterday settlement price,
  // yesterday close price, day before yesterday settlement price, day before yesterday close price.
  // Included if applicable.
  optional double mvo = 8;

  // Market value of futures calculated as the current market trade/best bid/best ask
  // (regarding to the risk account settings) times the number of futures
  // (positive for long and negative for short) in the portfolio.
  // If trade/best bid/best ask must be used for calculations but is not available,
  // then used first available from: settlement price, yesterday settlement price,
  // yesterday close price, day before yesterday settlement price, day before yesterday close price.
  // Included if applicable.
  optional double mvf = 10;

  // Allowable margin credit of the account.
  optional double margin_credit = 9;

  // UTC server time (including date) when the status was formed.
  optional google.protobuf.Timestamp status_utc_timestamp = 12;
}

// Account summary status.
// An update is sent once it is changed. Updates might be consolidated in case of frequent changes.
// Only changed account summary values are included into updates.
// When a calculation error occurs for a field, it is sent in 'failed_fields'
// and also in 'cleared_fields' for backward compatibility.
// Some fields may be valid but empty and not contained in snapshot message including 'failed_fields', 'cleared_fields'.
// For example, 'min_days_till_position_contract_expiration' if there are no open positions on the account.
message AccountSummaryStatus
{
  // List of trade subscription IDs this status is related to.
  repeated uint32 subscription_ids = 1;

  // True if this is a snapshot related message.
  // Since snapshot might be sent in several messages (including none), client should use
  // TradeSnapshotCompletion message as an indicator of complete snapshot delivery
  // for all accounts of particular subscription.
  // To speed up processing, the client can use the 'is_snapshot' field to determine when each account's
  // AccountSummaryStatus snapshot is complete and the data on the corresponding account is usable.
  // This field isn't sent after account authorization, in that case the first message contains
  // as many fields as available.
  optional bool is_snapshot = 2;

  // Account id of this status.
  // It is required field.
  optional sint32 account_id = 3;

  // Currency code of account values.
  // It is required field in snapshot and included into updates only if changed.
  optional string currency = 4;

  // Identifiers of fields being cleared.
  // E.g. to clear 'total_margin' server will include value 6 into the collection.
  // 'cleared_fields' contains identifiers of both failed fields and previously failed fields
  // that are valid but empty for now (see AccountSummaryStatus description).
  repeated uint32 cleared_fields = 5;

  // Identifiers of fields failed to calculate.
  // E.g. if 'net_change_pc' calculation failed server will include value 26 into the collection.
  // If the field is failed and it was in 'failed_fields' in the previous status too, it won't be sent again.
  repeated uint32 failed_fields = 32;

  // Flag used for updates and indicating that the account summary has been deleted for
  // the account and the subscriptions (see subscription_ids).
  // It can be set when the trader is no longer authorized for the account or the
  // account does no longer meet filtering criteria of the subscriptions
  // (see AccountSummaryParameters.account_filter).
  // Note that client can later receive an AccountSummaryStatus for the account and
  // the subscriptions again with this field reset once the trader is authorized on
  // the account or a filtering criteria is met again.
  optional bool deleted = 31;

  // Margin requirement calculated for worst-case based on open positions and working orders.
  optional double total_margin = 6;

  // Margin requirement based on current positions only.
  optional double position_margin = 7;

  // Available account funds including balance, realized profit (or loss), collateral and credits.
  // OTE and MVO are included regarding the account risk parameters.
  // For a group account, purchasing power is a recent snapshot calculated by the server.
  // It uses data from all accounts in the group, so it will not be synchronized with values
  // reported for only this account. Also, for group accounts, OTE and MVO components of
  // purchasing power will not be synchronized with market data updates.
  // See trading_account_2.Account.is_group_member.
  optional double purchasing_power = 8;

  // Open trade equity, or potential profit (or loss) from futures and future-style options positions
  // based on opening price of the position and the current future trade/best bid/best ask
  // (regarding to the risk account settings) or first available from: settlement price,
  // yesterday settlement price, yesterday close price, day before yesterday settlement price,
  // day before yesterday close price if trade is not available.
  optional double ote = 9;

  // Market value of options calculated as the current market trade/best bid/best ask of the option
  // (regarding to the risk account settings) times the number of options
  // (positive for long options and negative for short options) in the portfolio.
  // If trade/best bid/best ask must be used for calculations but is not available,
  // then used first available from: settlement price, yesterday settlement price,
  // yesterday close price, day before yesterday settlement price, day before yesterday close price.
  optional double mvo = 10;

  // Market value of futures calculated as the current market trade/best bid/best ask
  // (regarding to the risk account settings) times the number of futures
  // (positive for long and negative for short) in the portfolio.
  // If trade/best bid/best ask must be used for calculations but is not available,
  // then used first available from: settlement price, yesterday settlement price,
  // yesterday close price, day before yesterday settlement price, day before yesterday close price.
  optional double mvf = 11;

  // Allowable margin credit of the account.
  optional double margin_credit = 12;

  // Cash Excess.
  optional double cash_excess = 13;

  // Current account's balance. In particular includes: yesterday balance, profit/loss, option premium,
  // commission and Forex instrument positions.
  optional double current_balance = 15;

  // Realized profit/loss.
  optional double profit_loss = 16;

  // Unrealized profit/loss for options.
  optional double unrealized_profit_loss = 17;

  // Cash balance from the last statement.
  optional double yesterday_balance = 18;

  // Open trade equity for futures and futures-style options from the last statement.
  optional double yesterday_ote = 24;

  // Market value of premium-style options and fixed income from the last statement.
  optional double yesterday_mvo = 25;

  // Collateral on deposit.
  optional double yesterday_collateral = 14;

  // (profit_loss / abs(yesterday_balance)) in percentage.
  optional double net_change_pc = 26;

  // Sum of all fill sizes for the current day.
  optional cqg.Decimal total_filled_qty = 19;

  // Count of filled orders for the current day.
  optional uint32 total_filled_orders = 20;

  // Count of parked orders on the account.
  // Note: strategy orders and their child orders are counted,
  //       except for child orders of algo strategies.
  optional uint32 total_parked_orders = 28;

  // Count of working orders on the account.
  // Note: strategy orders and their child orders are counted,
  //       except for child orders of algo strategies.
  optional uint32 total_working_orders = 29;

  // Sum of position quantities among all long open positions on the account.
  optional cqg.Decimal long_open_positions_qty = 21;

  // Sum of position quantities among all short open positions on the account.
  optional cqg.Decimal short_open_positions_qty = 22;

  // Minimal value of days till contract expiration (in calendar days, not trading) among
  // all open positions on contracts with expiration date on the account.
  // Not set if there are no open positions on the account.
  optional uint32 min_days_till_position_contract_expiration = 23;

  // Limit of the maximum value of purchasing power for the account.
  // Can be empty e.g. when the account is a group account member.
  // See trading_account_2.Account.is_group_member.
  optional double purchasing_power_limit = 27;

  // Option premium.
  optional double option_premium = 30;
}

// Exchange position status.
// It contains positions received from exchange for an account on a per-contract basis,
// both open positions and realized P&L for closed positions (if available from exchange).
// There could be multiple position records for a given account. It is also
// possible for an account to have zero position records.
message ExchangePositionStatus
{
  // List of trade subscription IDs this status is related to.
  repeated uint32 subscription_ids = 1;

  // True means a snapshot of all positions for the account has been sent
  // (possibly in multiple ExchangePositionStatus messages, see is_complete field),
  // so client should replace any local cache with this data.
  // False or empty means this status contains only positions with changes.
  // Note: snapshots (is_snapshot=true) are possible even when ExchangePositionStatus
  // is sent as an update. This will occur when server cannot update individual
  // positions due to exchange limitations.
  optional bool is_snapshot = 2;

  // True means that requested data is complete at the moment for the account,
  // false means more report messages are expected for completeness.
  optional bool is_complete = 3 [default = true];

  // Account ID for which positions are supplied.
  // It is a required field.
  optional sint32 account_id = 4;

  // Positions for this account.
  repeated ExchangePosition positions = 5;
}

// Contains the position for a single contract received from exchange.
// Notes:
// 1) If exchange reports a single open position with total qty and
// weighted average price, there will be one message in open_positions field.
// 2) If exchange reports individual qty and price for each component of
// an overall open position, there will be many messages in open_positions field.
// 3) If exchange supports simultaneous long and short positions, there 
// could be ExchangeOpenPosition messages on both sides in open_positions field.
// 4) If the account has no open positions but a realized_pl to report, there
// will be an empty open_positions field.
message ExchangePosition
{
  // True means a snapshot of all positions for this contract for the account
  // has been sent (possibly in multiple ExchangePositionStatus messages, 
  // see ExchangePositionStatus.is_complete field),
  // so client should replace any local cache with data in this message.
  // False or empty means this status contains realized_profit_loss and
  // extra_attributes, plus only changed open positions in open_positions field.
  // Note: snapshots (is_snapshot=true) are possible even when ExchangePosition is sent as an
  // update. This will occur when server cannot update individual account positions
  // due to exchange limitations.
  optional bool is_snapshot = 1;

  // Position contract.
  // It is a required field.
  optional uint32 contract_id = 2;

  // Profit/ loss (in contract currency) for this position, if available from exchange.
  optional double realized_profit_loss = 3;

  // Details for open position.
  repeated ExchangeOpenPosition open_positions = 4;

  // Extra attributes.
  // They are present (the full set) if exchange provides additional attributes that clients can display.
  repeated AccountExtraAttribute extra_attributes = 5;
}

// Open position details.
message ExchangeOpenPosition
{
  // Identifier for this record.
  // In case of non-snapshot update, client should use this ID to update corresponding
  // entry in its local cache.
  // It is a required field.
  optional string id = 1;

  // True if the open position is short (result of a sell operation), long otherwise.
  optional bool is_short = 2;
  
  // Open position quantity.
  // It is a required field.
  optional cqg.Decimal qty = 3;

  // Position price (in correct price format).
  // It is a required field.
  optional double price = 4;

  // Extra attributes.
  // They are present if exchange provides additional attributes for this open position record
  // that clients can display.
  repeated AccountExtraAttribute extra_attributes = 5;
}

// Exchange balance status.
// It contains current balances received from exchange for an account on a per-currency basis.
// Note: we support at most one balance record for a given currency. It is also
// possible for an account to have zero balance records.
message ExchangeBalanceStatus
{
  // List of trade subscription IDs this status is related to.
  repeated uint32 subscription_ids = 1;

  // True means this status contains a complete snapshot of all balances
  // for the account, so client should replace any local cache with this data.
  // False or empty means this status contains only balances with changes.
  // Note that each ExchangeBalanceStatus message is considered as complete,
  // so we do not need 'is_complete' field here.
  optional bool is_snapshot = 2;

  // Account ID for which balances are supplied
  // It is a required field.
  optional sint32 account_id = 3;

  // Balances for this account.
  repeated ExchangeCurrencyBalance balances = 4;
}

// Contains a balance record for a single currency.
message ExchangeCurrencyBalance
{
  // ISO-4217-based currency code.
  // Note that cryptocurrencies use codes that are ISO-4217-style, though usually not actual ISO codes.
  // It is a required field.
  optional string currency = 1;

  // Current cash balance in this currency.
  // It is a required field.
  optional double cash_balance = 2;

  // Extra attributes.
  // They are present if exchange provides additional attributes that clients can display.
  repeated AccountExtraAttribute extra_attributes = 3;
}

// Account-related extra element as key-value pair.
message AccountExtraAttribute
{
  // Attribute name.
  // It is a required field.
  optional string name = 1;

  // If provided, this is a name for the attribute suitable for client
  // display purposes. If not provided, clients can fall back to displaying name field.
  optional string display_name = 2;

  // Attribute value.
  optional string value = 3;
}

// Historical orders request.
message HistoricalOrdersRequest
{
  // Only orders from specified business date (inclusively) are to be returned
  // (date only value in time format).
  // Working and parked orders of the current day are returned despite the 
  // from_date, to_date values.
  // If order was not cleared for several days, it will be present in
  // a report if one of those days hits the requested range. E.g., order was
  // filled on Friday, statement happened on Monday, if request is done for
  // a Saturday, order will be present in the report.
  // Note: Starting date must not be more than 30 days back from now.
  required sint64 from_date = 1;

  // Only orders till specified business date (inclusively) is to be returned (date only value in time format).
  // Current business day if the field is omitted.
  optional sint64 to_date = 2;

  // Filter orders by account. It is required to leave account_ids list empty to select all accounts of the user.
  repeated sint32 account_ids = 3;

  // If this field set to true, statuses on orders with ORDER_TYPE_CROSS type will be
  // included into responses. See CrossOrderParameters message.
  // Note that order statuses with cross order type are excluded only if 
  // include_cross_orders set to false (or empty) and ORDER_TYPE_CROSS type is not included 
  // into order_snapshot_filter.order_types.
  optional bool include_cross_orders = 4;

  // Only order statuses, transaction statuses that match the filter are included in a report.
  // By default no filtration is done by the filter.
  optional OrderSnapshotFilter order_snapshot_filter = 5;

  // No more than specified number of order statuses will be returned.
  // Zero or omitted means no limit.
  // If there are more order statuses than specified, HistoricalOrdersReport.order_status_limit_reached is set in true
  // in last report for the request.
  optional uint32 max_order_status_count = 6;

  // No more than specified number of transaction statuses within all order statuses will be returned.
  // Zero or omitted means no limit.
  // If there are more transaction statuses than specified, HistoricalOrdersReport.transaction_status_limit_reached
  // is set in true in last report for the request.
  // Note: Limitation is aligned on order status. So, if next order status transaction count leads to limit violation
  // whole order status is not included into the report.
  optional uint32 max_transaction_status_count = 7;

  // If this field set (to the original order_id, not any modifies), only child orders associated with that parent
  // order will be returned. Results do not include the parent order itself. See OrderStatus.chain_order_id.
  // To get algo strategy child orders, set HistoricalOrdersRequest.include_algo_strategy_child_orders to true.
  optional string parent_chain_order_id = 8;

  // If this field set to true, child orders of algo strategies will be included
  // into responses.
  // See TradeSubscription.include_algo_strategy_child_orders.
  optional bool include_algo_strategy_child_orders = 9;
}

// Response for historical orders request.
message HistoricalOrdersReport
{
  // List of order statuses matching historical order filter.
  repeated order_2.OrderStatus order_statuses = 1;

  // Indicator that not all order statuses are returned. 
  // Limit by HistoricalOrdersRequest.max_order_status_count is reached.
  optional bool order_status_limit_reached = 2;

  // Indicator that not all order statuses are returned. 
  // Limit by HistoricalOrdersRequest.max_transaction_status_count is reached.
  optional bool transaction_status_limit_reached = 3;
}

// Request for trading feature entitlements.
message BrokerageTradingFeatureEntitlementRequest
{
  // Account ID in CQG trade routing system.
  // If no account supplied, data is returned for ALL accounts trader is authorized on.
  repeated sint32 account_ids = 1;
}

// Report with trading feature entitlements.
message BrokerageTradingFeatureEntitlementReport
{
  // Set of trading feature entitlements.
  repeated TradingFeatureEntitlementEntry trading_feature_entitlements = 1;
}

// Account/brokerage-specific trading feature entitlement.
// For future compatibility unknown entitlements should be ignored.
message TradingFeatureEntitlementEntry
{
  // Account ID in CQG trade routing system that corresponds to trading feature entitlement.
  optional sint32 account_id = 1;

  // Trading feature entitlement.
  // This field is associated with TradingFeatureEntitlement enum type.
  optional uint32 entitlement = 2;
}

// Trading feature entitlements.
enum TradingFeatureEntitlement
{
  // Disallow skipping non-fast click confirmations.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_FAST_CLICK_CONFIRMATIONS = 3;

  // Disallow skipping Responsive DOMTrader fast click confirmations.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_DDT_FAST_CLICK_CONFIRMATIONS = 4;

  // Disallow Heads Up.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_HEADS_UP = 5;

  // Disallow Order View.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_ORDER_VIEW = 6;

  // Disallow Responsive DOMTrader.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_RESPONSIVE_DOM_TRADER = 8;

  // Disallow Dynamic DOMTrader.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_DYNAMIC_DOM_TRADER = 9;

  // Disallow buy/sell fast click.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_BUY_SELL_FAST_CLICK = 11;

  // Disallow skipping Dynamic DOMTrader fast click confirmations.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_DDT_FAST_CLICK_CONFIRMATIONS = 12;

  // Disallow skipping force order confirmation.
  TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_FORCE_ORDER_CONFIRMATION = 13;
}

// Provides care auto activation parameters for the user.
message CareAutoActivationParametersRequest
{
}

// In case of an update the report contains full list of available parameters.
message CareAutoActivationParametersReport
{
  // Care auto activation parameters for the user.
  repeated CareAutoActivationParameters parameters = 1;
}

message CareAutoActivationParameters
{
  // True if the user is authorized for auto activation care order for the brokerage.
  optional bool is_current_user_responsible_for_auto_activation = 1;

  // Brokerage ID.
  optional uint32 brokerage_id = 2;

  // Max order quantity allowed for Care Auto Activation.
  // Uninitialized value means no limit and auto activate orders of any size.
  optional uint32 max_order_qty = 3;
}

// Request for account risk parameters for all authorized accounts.
message AccountRiskParametersRequest
{
}

// Report with account risk parameters.
message AccountRiskParametersReport
{
  // List of account risk parameters per account.
  repeated AccountRiskParameters account_risk_parameters = 1;
}

// Risk parameters for the account.
message AccountRiskParameters
{
  // Account ID in CQG trade routing system.
  // This is a required field.
  optional sint32 account_id = 1;

  // True if currency conversions should use real-time rates (real-time rate sources or constant currency rates,
  // see trading_account_2.CurrencyRateSource) for the account, if available. E.g. for calculation of OTE.
  // False or empty if the account prefers to use brokerage daily currency rates only
  // (see trading_account_2.BrokerageCurrencyRates).
  optional bool use_realtime_currency_rates = 2;
}